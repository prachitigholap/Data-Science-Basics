# -*- coding: utf-8 -*-
"""Math and Statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18zwb1m9b_ioi02dDSTF0a8or45hdowm-

# Simple Arithmetic
"""

import numpy as np
from numpy.random import randn

np.set_printoptions(precision=2)

"""creating arrays using Lists

"""

a = np.array([1,2,3,4,5,6])
a

for i in a:
  if i == '3':
    print (i)
  else:
    print('null')

b = np.array([['10', '20', '30'],['40', '50', '60']])
b

np.random.seed(25)
c = 36*np.random.randn(6)
c

d = np.arange(1,35)
d

a = np.array(['1','2', '3', '4', '5', '6'])
for i in a:
  a = i*(10)
  print(a)

"""# Matrix Multiplication"""

import numpy as np
from numpy.random import randn

aa = np.array([[2., 4., 6.], [1., 3., 5.], [10., 20., 30.]])
aa

bb = np.array([[0., 1., 2.], [3., 4., 5.], [6., 7., 8.]])
bb

aa*bb

np.dot(aa, bb)

"""# Statistics

"""

import numpy as np
import pandas as pd
from pandas import Series, DataFrame

import scipy
from scipy import stats

data = ('/content/mtcars.csv')
cars = pd.read_csv(data)

cars.describe()

cars.columns = ['car_names', 'mpg', 'cyl', 'disp', 'hp', 'drat', 'wt', 'qsec', 'vs', 'am', 'gear', 'carb']
cars.head()

cars.sum()

cars.sum(axis=1)

cars.mean()

cars.median()

cars.max()

mpg = cars.mpg
mpg.idxmax()

cars.std()

cars.var()

gear = cars.gear
gear.value_counts()



"""# Summarizing Categorical Data"""

carb = cars.carb
carb.value_counts()

cars_cat = cars[['car_names', 'cyl', 'vs', 'am', 'gear', 'carb']]
cars_cat.head()

gears_group = cars_cat.groupby('gear')
gears_group.describe()

cars['group'] = pd.Series(cars.gear, dtype="category")

pd.crosstab(cars['am'], cars['gear'])

"""# Parametric Correlation Analysis"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
from pylab import rcParams

import scipy
from scipy.stats import pearsonr

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
rcParams['figure.figsize'] = 8,4
plt.style.use("seaborn-whitegrid")

cars.head()

sb.pairplot(cars)

mpg = cars['mpg']
hp = cars['hp']
qsec = cars['qsec']
wt = cars['wt']

pearsonr_coefficient, p_value = pearsonr(mpg, hp)
print('PearsonR Correlation Coefficient %0.3f' % (pearsonr_coefficient))

"""corr = X.corr()  // can be used to directly find out pearson correlation

# Spearman Rank Correlation
"""

X = cars[['cyl', 'vs', 'am', 'gear']]

corr = X.corr() #pearsons
corr

sb.pairplot(X)

cyl = cars['cyl']
vs = cars['vs']
am = cars['am']
gear = cars['gear']

# spearmanr_coefficient, p_value = spearmanr(cyl, vs)

# print('Spearman Rank Coefficient %0.3f' % (spearmanr_coefficient))

"""# Chi Square Test"""

from scipy.stats import chi2_contingency

table = pd.crosstab(cyl, am)
chi2, p, dof, expected = chi2_contingency(table.values)
print('chi-square statistics %0.3f p-value %0.3f' % (chi2, p))

"""# Dataset Distribution"""

mpg = cars.mpg
plt.plot('mpg')

cars[['mpg']].describe()

# mpg_matrix = mpg.values.reshape(-1, 1)
# scaled = preprocessing.MinMaxScaler()

# scaled_mpg = scaled.fit_transform(mpg_matrix)
# plt.plot(scaled_mpg)

"""# Outlier Analysis"""

data = ('/content/iris.csv')
df = pd.read_csv(data)

df.head()

df.columns=['index','sepal length', 'sepal width', 'petal length', 'petal width', 'species']

X = ['sepal length', 'petal length']
Y = ['sepal width', 'petal width']
plt.scatter(X,Y)

df.describe()

X = df.iloc[:, 0:4].values
Y = df.iloc[:, 4].values
df[:5]

df.boxplot(return_type='dict')
plt.plot()

"""# MultiVariate Outlier Detection"""

sb.boxplot(x='species', y='sepal length', data=df, palette="hls")

sb.pairplot(df, hue='species',palette='hls')